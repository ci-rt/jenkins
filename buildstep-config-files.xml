<?xml version='1.0' encoding='UTF-8'?>
<org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider plugin="managed-scripts@1.2.4">
  <configs>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1457780866812</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1457780866812</id>
        <name>Parse List to Property</name>
        <comment></comment>
        <content>LIST=&quot;$1&quot;
NAME=&quot;$2&quot;
PROP=&quot;$3&quot;

if [ x&quot;$2&quot; == x ]
then
    echo &quot;usage: $0 &lt;listfile&gt; &lt;variable&gt; &lt;propertyfile&gt;&quot;
    exit 1
fi

if [ ! -f $LIST ]
then
	echo &quot;$NAME=\&quot;\&quot;&quot; &gt;&gt; $PROP
	exit 0
fi

# ignore empty lines and everything after &quot;#&quot;.
# concat each line seperated by space into variable $NAME
# listfile:
# A
# B
# C
# NAME = &quot;var&quot;
# propertyfile:
# var = A B C

awk -vV=&quot;$NAME&quot; \
    &apos;BEGIN{A=&quot;&quot;}{gsub (&quot;#.*&quot;, &quot;&quot;); if ($0) A=A&quot; &quot;$1}END{print V&quot; = &quot;A}&apos; \
    $LIST &gt;&gt; $PROP
</content>
        <providerId>org.jenkinsci.plugins.managedscripts.ScriptConfig</providerId>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>LISTFILE</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>VARIABLE</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>PROPERTYFILE</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1457728747646</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1457728747646</id>
        <name>prepare kernel config</name>
        <comment></comment>
        <content>CONF=&quot;$1&quot;
OVERLAY=&quot;$2&quot;

if [ x&quot;$1&quot; == x ]
then
    echo &quot;usage: $0 &lt;config&gt; [overlay]&quot;
    exit 1
fi

ARCH=$(dirname $CONF)
BUILD=build

CONFFILE=&quot;.env/compile/configs/${CONF}&quot;
OVERLAYFILE=&quot;.env/compile/overlays/${OVERLAY}&quot;
ARCHOVERLAYFILE=&quot;.env/compile/overlays/${ARCH}/${OVERLAY}&quot;
CUSTBRANCH=&quot;.env/custom/${CONF}&quot;
t1=.temp1
t2=.temp2
tovr=.tmpoverlay

CONF=$(basename $CONF)

apply_overlay()
{
    echo &quot;Apply Overlay configuration&quot;
 	
    # ignore lines without CONFIG_ option
    grep &quot;CONFIG_&quot; $1 | sort &gt; $3
    
    # create a sed script to remove each config set or unset
    # in the kernel configuration and modified by overlay.
    # concat the resulting config and the overlay.
    OPTS=$(sed -e &apos;s/.*\(CONFIG[_A-Z0-1]*\).*/-e s@\1@@/&apos; -e t -e d $3)
    sed -i $OPTS -e T -e d $2
    cat $3 &gt;&gt; $2
}

check_overlay()
{
    echo &quot;Check Overlay configuration&quot;
    
    # create a sed script to filter out every option set in overlay.
    OPTS=$(sed -e &apos;s/.*\(CONFIG[_A-Z0-1]*\).*/-e s@\\(\1\\)@\\1@/&apos; \
               -e t -e d $1)
    # remove everything afer &quot;#&quot;           
    sed -i -s &apos;s/#.*//&apos; $1

	# use previously created script
    sed $OPTS -e t -e d $2 | sort &gt; $3
    
    # compare overlay and result. Ignore diff header and added stuff.
    # Ignore removed empty lines also.
    diff -uwB $1 $3 | sed -e &apos;s/^---.*//&apos; -e &apos;s/^[+ @].*//&apos; | \
    	awk &apos;{gsub(&quot;^-&quot;,&quot;&quot;); if ($1) {print &quot;failed to set overlay option &quot;$0; exit 1}}&apos;
    if [ $? -ne 0 ]
    then
        echo &quot;failure setting overlay options.&quot;
        exit 1
    fi
}

mkdir -p $BUILD

export HEAD=$(git rev-parse HEAD)

rm -f .custcommit
touch .custcommit
echo &quot;$HEAD&quot; &gt; .headcommit

if [ -f &quot;$CUSTBRANCH&quot; ]
then
    git checkout $(sed &apos;s/#.*//&apos; &quot;$CUSTBRANCH&quot;)
    export CUST=$(git rev-parse HEAD)
    echo &quot;$CUST&quot; &gt; .custcommit
    git merge $HEAD
fi

echo &quot;Generate Kernel configuration $ARCH $CONF&quot;
if [ -f &quot;$CONFFILE&quot; ]
then
    cp &quot;$CONFFILE&quot; &quot;$BUILD/.config&quot;
    make ARCH=$ARCH O=$BUILD oldconfig
else
	case &quot;$CONF&quot; in
    &apos;allnoconfig&apos;)
    	;;
    &apos;allyesconfig&apos;)
    	;;
    &apos;allmodconfig&apos;)
    	;;
    &apos;alldefconfig&apos;)
    	;;
    &apos;randconfig&apos;)
    	;;
    *)
		if [ ! -f &quot;arch/$ARCH/configs/$CONF&quot; ]
    	then
    		echo &quot;defconfig $CONF not found&quot;
        	exit 1
    	fi
        ;;
    esac
    make ARCH=$ARCH O=$BUILD $CONF
fi

# handle overlay
if [ x != x&quot;$OVERLAY&quot; ]
then
    if [ ! -f $OVERLAYFILE ]
    then
        echo &quot;error: overlay $OVERLAY not found&quot;
        exit 1
    fi

	cat &quot;$OVERLAYFILE&quot; &quot;$ARCHOVERLAYFILE&quot; &gt; $tovr
    apply_overlay &quot;$tovr&quot; $BUILD/.config $t1
    make ARCH=$ARCH O=$BUILD oldconfig
    check_overlay $t1 $BUILD/.config $t2
fi

# create property file
cat .env/env/kernel.properties .env/env/${ARCH}.properties &gt; $BUILD/.properties
echo &quot;ARCH = $ARCH&quot; &gt;&gt; $BUILD/.properties
exit 0
</content>
        <providerId>org.jenkinsci.plugins.managedscripts.ScriptConfig</providerId>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>CONF</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>OVERLAY</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1458211281680</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1458211281680</id>
        <name>parse cyclictest histogram</name>
        <comment></comment>
        <content>HIST=&quot;$1&quot;
CYCTESTCMD=&quot;$2&quot;

NAME=$(basename $HIST | sed &apos;s/\..*//&apos;)
PASS=1

if [ x != &quot;x$(grep &apos;Break value:&apos; $HIST)&quot; ]
then
    echo &quot;Latency exceeds Limit ${LIMIT} us&quot;
    PASS=0
fi

# concat min, max and aeverage values seperated by comma:
# Initialise Label l and Value v.
# Look for &quot;Latencies&quot; and handle each value for each CPU.
# Print out label and values seperated by comma.
awk &apos;BEGIN{l=&quot;&quot;;v=&quot;&quot;;}/Latencies/{f=tolower($2);a=$4;for (i = 5; i &lt;= NF; i++) {a = @f(a, $i);}l=l$2&quot;,&quot;;v=v&quot;&quot;a&quot;,&quot;;}END{print l&quot;\n&quot;v}function avg(a, b){if(!a) return b; if(!b) return a; return (a + b)/2}function max(a, b){return (a &gt; b) ? a : b}function min(a, b){return (a &lt; b) ? a : b}&apos; &quot;$HIST&quot; &gt; &quot;${NAME}.cvs&quot;

# min, max, avr seperated by comma escaped by &apos;
MINMAX=$(tail -n1 &quot;${NAME}.cvs&quot;| awk -F, &apos;{print &quot;\x27&quot;$1&quot;\x27,\x27&quot;$2&quot;\x27,\x27&quot;$3&quot;\x27,&quot;}&apos;)

# fail on Database error
set -e

# Make new cyclictest entry
$PGSQL -c &quot;INSERT INTO cyclictest VALUES(&quot;\&apos;&quot;$CYCLICTESTID&quot;\&apos;&quot;, &quot;\&apos;&quot;idle&quot;\&apos;&quot;, &quot;\&apos;&quot;$DURATION&quot;\&apos;&quot;, &quot;\&apos;&quot;$INTERVAL&quot;\&apos;&quot;, $MINMAX &quot;\&apos;&quot;$BOOTTESTID&quot;\&apos;&quot;, &quot;\&apos;&quot;$PASS&quot;\&apos;&quot;, &quot;\&apos;&quot;$LIMIT&quot;\&apos;&quot;, decode(&quot;\&apos;&quot;$(hexdump -v -e &apos;/1 &quot;%02X&quot;&apos; $CYCTESTCMD)&quot;\&apos;&quot;, &quot;\&apos;&quot;hex&quot;\&apos;&quot;), &quot;\&apos;&quot;$ENTRYOWNER&quot;\&apos;&quot;);&quot; RT-Test

# Push histogram data into database.
awk -vowner=&quot;$ENTRYOWNER&quot; -vcid=&quot;$CYCLICTESTID&quot; &apos;{gsub(&quot;#.*&quot;,&quot;&quot;); for (i=2; i&lt;=NF; i++) if ($i) print &quot;INSERT INTO histogram (cpu, latency, count, cyclictest_id, owner) VALUES(\x27&quot;(i-1)&quot;\x27,\x27&quot;$1&quot;\x27,\x27&quot;$i&quot;\x27,\x27&quot;cid&quot;\x27,\x27&quot;owner&quot;\x27);&quot;}&apos; &quot;$HIST&quot; | $PGSQL RT-Test

exit 0
</content>
        <providerId>org.jenkinsci.plugins.managedscripts.ScriptConfig</providerId>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>HIST</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>CYCTESTCMD</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
  </configs>
</org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider>